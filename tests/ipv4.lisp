(defpackage #:ip.tests.ipv4
  (:use #:common-lisp)
  (:export #:run-tests))

(in-package #:ip.tests.ipv4)

(defun parse-ipv4-address ()
  (flet ((test (expected-output input &rest args)
           (let ((result (apply #'ip:parse-ipv4-address input args)))
             (assert (string= expected-output (princ-to-string result))))))
    (test "192.0.2.235"   "192.0.2.235")
    (test "192.0.2.235"   "3221226219")
    (test "127.0.0.1"     "127.1")
    (test "127.1.0.1"     "127.1.1")
    (test "127.0.255.250" "127.65530")
    (test "127.1.0.1"     "127.65537")
    (test "0.0.0.1"       "0.1")
    (test "0.1.0.1"       "0.1.1")
    (test "127.0.0.1"     "a127.1z" :start 1 :end 6)

    ;; HEX
    (test "192.0.2.235"   "0xC00002EB")
    (test "127.0.0.1"     "0x7F.1")
    (test "127.0.0.1"     "0x7F.0x01")
    (test "127.0.0.1"     "0x7F.0x1")
    (test "127.0.0.1"     "0x7F.0x000001")
    (test "127.1.0.1"     "0x7F.1.0x01")
    (test "127.0.255.250" "127.0xFFFA")
    (test "127.0.255.250" "0x7F.0xFFFA")
    (test "127.1.0.1"     "127.0x010001")
    (test "127.1.0.1"     "0x7F.0x10001")
    (test "127.1.0.1"     "0x7F.0x010001")
    (test "127.1.0.1"     "127.0x000010001")
    (test "127.1.0.1"     "0x7F.0x00010001")

    ;; OCT
    (test "8.9.10.11"     "010.011.012.013")
    (test "192.0.2.235"   "0030000001353")
    (test "127.0.0.1"     "0177.1")
    (test "127.0.0.1"     "0177.01")
    (test "127.0.0.1"     "0177.001")
    (test "127.1.0.1"     "0177.1.01")
    (test "127.1.0.1"     "0177.01.1")
    (test "127.0.255.250" "127.0177772")
    (test "127.0.255.250" "0177.0177772")
    (test "127.1.0.1"     "127.0200001")
    (test "127.1.0.1"     "127.00200001")
    (test "127.1.0.1"     "0177.0200001")
    (test "127.1.0.1"     "0177.000200001")))

(defun trailing-junk ()
  (flet ((test (expected-output expected-end input &rest args)
           (multiple-value-bind (result end)
               (apply #'ip:parse-ipv4-address input :junk-allowed t args)
             (assert (string= expected-output (princ-to-string result)))
             (assert (= expected-end end)))))
    (test "127.0.0.1" 5 "127.1/8")
    (test "7.8.9.10"  8 "7.8.9.10.in-addr.arpa")))

(defun invalid-addresses ()
  (flet ((test (input &rest args)
           (handler-case
               (apply #'ip:parse-ipv4-address input args)
             (ip:invalid-ip-address ()
               (return-from test t)))
           (cerror "Proceed with the tests."
                   "Expected ~S~@[ ~S~] to be invalid, but parsing succeeded."
                   input args)))
    (test ".")
    (test "..")
    (test "4294967296")
    (test "65530.65530")
    (test "127..1")
    (test "127.1.")
    (test "127.0.0.256")
    (test "127.65530.1")))

(defun run-tests ()
  (parse-ipv4-address)
  (invalid-addresses)
  (trailing-junk)
  t)
